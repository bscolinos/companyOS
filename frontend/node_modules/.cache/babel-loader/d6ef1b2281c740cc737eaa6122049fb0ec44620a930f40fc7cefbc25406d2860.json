{"ast":null,"code":"import{create}from'zustand';import{persist}from'zustand/middleware';import{authService}from'../services/authService';import toast from'react-hot-toast';export const useAuthStore=create()(persist((set,get)=>({user:null,token:null,isLoading:false,login:async(email,password)=>{set({isLoading:true});try{const response=await authService.login(email,password);set({user:response.user,token:response.token,isLoading:false});toast.success('Login successful!');return true;}catch(error){set({isLoading:false});toast.error(error.message||'Login failed');return false;}},register:async userData=>{set({isLoading:true});try{const user=await authService.register(userData);set({isLoading:false});toast.success('Registration successful! Please login.');return true;}catch(error){set({isLoading:false});toast.error(error.message||'Registration failed');return false;}},logout:()=>{set({user:null,token:null});authService.logout();toast.success('Logged out successfully');},initializeAuth:async()=>{const token=get().token;if(token){set({isLoading:true});try{const user=await authService.getCurrentUser();set({user,isLoading:false});}catch(error){// Token is invalid, clear it\nset({user:null,token:null,isLoading:false});}}}}),{name:'auth-storage',partialize:state=>({token:state.token})}));","map":{"version":3,"names":["create","persist","authService","toast","useAuthStore","set","get","user","token","isLoading","login","email","password","response","success","error","message","register","userData","logout","initializeAuth","getCurrentUser","name","partialize","state"],"sources":["/Users/billscolinos/Documents/companyOS/frontend/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { authService } from '../services/authService';\r\nimport { User } from '../types';\r\nimport toast from 'react-hot-toast';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  register: (userData: RegisterData) => Promise<boolean>;\r\n  logout: () => void;\r\n  initializeAuth: () => void;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone?: string;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      token: null,\r\n      isLoading: false,\r\n\r\n      login: async (email: string, password: string) => {\r\n        set({ isLoading: true });\r\n        try {\r\n          const response = await authService.login(email, password);\r\n          set({\r\n            user: response.user,\r\n            token: response.token,\r\n            isLoading: false,\r\n          });\r\n          toast.success('Login successful!');\r\n          return true;\r\n        } catch (error: any) {\r\n          set({ isLoading: false });\r\n          toast.error(error.message || 'Login failed');\r\n          return false;\r\n        }\r\n      },\r\n\r\n      register: async (userData: RegisterData) => {\r\n        set({ isLoading: true });\r\n        try {\r\n          const user = await authService.register(userData);\r\n          set({ isLoading: false });\r\n          toast.success('Registration successful! Please login.');\r\n          return true;\r\n        } catch (error: any) {\r\n          set({ isLoading: false });\r\n          toast.error(error.message || 'Registration failed');\r\n          return false;\r\n        }\r\n      },\r\n\r\n      logout: () => {\r\n        set({ user: null, token: null });\r\n        authService.logout();\r\n        toast.success('Logged out successfully');\r\n      },\r\n\r\n      initializeAuth: async () => {\r\n        const token = get().token;\r\n        if (token) {\r\n          set({ isLoading: true });\r\n          try {\r\n            const user = await authService.getCurrentUser();\r\n            set({ user, isLoading: false });\r\n          } catch (error) {\r\n            // Token is invalid, clear it\r\n            set({ user: null, token: null, isLoading: false });\r\n          }\r\n        }\r\n      },\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      partialize: (state) => ({ token: state.token }),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,SAAS,CAChC,OAASC,OAAO,KAAQ,oBAAoB,CAC5C,OAASC,WAAW,KAAQ,yBAAyB,CAErD,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CAqBnC,MAAO,MAAM,CAAAC,YAAY,CAAGJ,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACL,CAACI,GAAG,CAAEC,GAAG,IAAM,CACbC,IAAI,CAAE,IAAI,CACVC,KAAK,CAAE,IAAI,CACXC,SAAS,CAAE,KAAK,CAEhBC,KAAK,CAAE,KAAAA,CAAOC,KAAa,CAAEC,QAAgB,GAAK,CAChDP,GAAG,CAAC,CAAEI,SAAS,CAAE,IAAK,CAAC,CAAC,CACxB,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAX,WAAW,CAACQ,KAAK,CAACC,KAAK,CAAEC,QAAQ,CAAC,CACzDP,GAAG,CAAC,CACFE,IAAI,CAAEM,QAAQ,CAACN,IAAI,CACnBC,KAAK,CAAEK,QAAQ,CAACL,KAAK,CACrBC,SAAS,CAAE,KACb,CAAC,CAAC,CACFN,KAAK,CAACW,OAAO,CAAC,mBAAmB,CAAC,CAClC,MAAO,KAAI,CACb,CAAE,MAAOC,KAAU,CAAE,CACnBV,GAAG,CAAC,CAAEI,SAAS,CAAE,KAAM,CAAC,CAAC,CACzBN,KAAK,CAACY,KAAK,CAACA,KAAK,CAACC,OAAO,EAAI,cAAc,CAAC,CAC5C,MAAO,MAAK,CACd,CACF,CAAC,CAEDC,QAAQ,CAAE,KAAO,CAAAC,QAAsB,EAAK,CAC1Cb,GAAG,CAAC,CAAEI,SAAS,CAAE,IAAK,CAAC,CAAC,CACxB,GAAI,CACF,KAAM,CAAAF,IAAI,CAAG,KAAM,CAAAL,WAAW,CAACe,QAAQ,CAACC,QAAQ,CAAC,CACjDb,GAAG,CAAC,CAAEI,SAAS,CAAE,KAAM,CAAC,CAAC,CACzBN,KAAK,CAACW,OAAO,CAAC,wCAAwC,CAAC,CACvD,MAAO,KAAI,CACb,CAAE,MAAOC,KAAU,CAAE,CACnBV,GAAG,CAAC,CAAEI,SAAS,CAAE,KAAM,CAAC,CAAC,CACzBN,KAAK,CAACY,KAAK,CAACA,KAAK,CAACC,OAAO,EAAI,qBAAqB,CAAC,CACnD,MAAO,MAAK,CACd,CACF,CAAC,CAEDG,MAAM,CAAEA,CAAA,GAAM,CACZd,GAAG,CAAC,CAAEE,IAAI,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CAChCN,WAAW,CAACiB,MAAM,CAAC,CAAC,CACpBhB,KAAK,CAACW,OAAO,CAAC,yBAAyB,CAAC,CAC1C,CAAC,CAEDM,cAAc,CAAE,KAAAA,CAAA,GAAY,CAC1B,KAAM,CAAAZ,KAAK,CAAGF,GAAG,CAAC,CAAC,CAACE,KAAK,CACzB,GAAIA,KAAK,CAAE,CACTH,GAAG,CAAC,CAAEI,SAAS,CAAE,IAAK,CAAC,CAAC,CACxB,GAAI,CACF,KAAM,CAAAF,IAAI,CAAG,KAAM,CAAAL,WAAW,CAACmB,cAAc,CAAC,CAAC,CAC/ChB,GAAG,CAAC,CAAEE,IAAI,CAAEE,SAAS,CAAE,KAAM,CAAC,CAAC,CACjC,CAAE,MAAOM,KAAK,CAAE,CACd;AACAV,GAAG,CAAC,CAAEE,IAAI,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CACpD,CACF,CACF,CACF,CAAC,CAAC,CACF,CACEa,IAAI,CAAE,cAAc,CACpBC,UAAU,CAAGC,KAAK,GAAM,CAAEhB,KAAK,CAAEgB,KAAK,CAAChB,KAAM,CAAC,CAChD,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}