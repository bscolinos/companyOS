{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { authService } from '../services/authService';\nimport toast from 'react-hot-toast';\nexport const useAuthStore = create()(persist((set, get) => ({\n  user: null,\n  token: null,\n  isLoading: false,\n  login: async (email, password) => {\n    set({\n      isLoading: true\n    });\n    try {\n      const response = await authService.login(email, password);\n      set({\n        user: response.user,\n        token: response.token,\n        isLoading: false\n      });\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      toast.error(error.message || 'Login failed');\n      return false;\n    }\n  },\n  register: async userData => {\n    set({\n      isLoading: true\n    });\n    try {\n      const user = await authService.register(userData);\n      set({\n        isLoading: false\n      });\n      toast.success('Registration successful! Please login.');\n      return true;\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      toast.error(error.message || 'Registration failed');\n      return false;\n    }\n  },\n  logout: () => {\n    set({\n      user: null,\n      token: null\n    });\n    authService.logout();\n    toast.success('Logged out successfully');\n  },\n  initializeAuth: async () => {\n    const token = get().token;\n    if (token) {\n      set({\n        isLoading: true\n      });\n      try {\n        const user = await authService.getCurrentUser();\n        set({\n          user,\n          isLoading: false\n        });\n      } catch (error) {\n        // Token is invalid, clear it\n        set({\n          user: null,\n          token: null,\n          isLoading: false\n        });\n      }\n    }\n  }\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    token: state.token\n  })\n}));","map":{"version":3,"names":["create","persist","authService","toast","useAuthStore","set","get","user","token","isLoading","login","email","password","response","success","error","message","register","userData","logout","initializeAuth","getCurrentUser","name","partialize","state"],"sources":["/Users/billscolinos/Documents/companyOS/frontend/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { authService, User } from '../services/authService';\r\nimport toast from 'react-hot-toast';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  register: (userData: RegisterData) => Promise<boolean>;\r\n  logout: () => void;\r\n  initializeAuth: () => void;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone?: string;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      token: null,\r\n      isLoading: false,\r\n\r\n      login: async (email: string, password: string) => {\r\n        set({ isLoading: true });\r\n        try {\r\n          const response = await authService.login(email, password);\r\n          set({\r\n            user: response.user,\r\n            token: response.token,\r\n            isLoading: false,\r\n          });\r\n          toast.success('Login successful!');\r\n          return true;\r\n        } catch (error: any) {\r\n          set({ isLoading: false });\r\n          toast.error(error.message || 'Login failed');\r\n          return false;\r\n        }\r\n      },\r\n\r\n      register: async (userData: RegisterData) => {\r\n        set({ isLoading: true });\r\n        try {\r\n          const user = await authService.register(userData);\r\n          set({ isLoading: false });\r\n          toast.success('Registration successful! Please login.');\r\n          return true;\r\n        } catch (error: any) {\r\n          set({ isLoading: false });\r\n          toast.error(error.message || 'Registration failed');\r\n          return false;\r\n        }\r\n      },\r\n\r\n      logout: () => {\r\n        set({ user: null, token: null });\r\n        authService.logout();\r\n        toast.success('Logged out successfully');\r\n      },\r\n\r\n      initializeAuth: async () => {\r\n        const token = get().token;\r\n        if (token) {\r\n          set({ isLoading: true });\r\n          try {\r\n            const user = await authService.getCurrentUser();\r\n            set({ user, isLoading: false });\r\n          } catch (error) {\r\n            // Token is invalid, clear it\r\n            set({ user: null, token: null, isLoading: false });\r\n          }\r\n        }\r\n      },\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      partialize: (state) => ({ token: state.token }),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,WAAW,QAAc,yBAAyB;AAC3D,OAAOC,KAAK,MAAM,iBAAiB;AAqBnC,OAAO,MAAMC,YAAY,GAAGJ,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACL,CAACI,GAAG,EAAEC,GAAG,MAAM;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,KAAK;EAEhBC,KAAK,EAAE,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IAChDP,GAAG,CAAC;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;IACxB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,WAAW,CAACQ,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACzDP,GAAG,CAAC;QACFE,IAAI,EAAEM,QAAQ,CAACN,IAAI;QACnBC,KAAK,EAAEK,QAAQ,CAACL,KAAK;QACrBC,SAAS,EAAE;MACb,CAAC,CAAC;MACFN,KAAK,CAACW,OAAO,CAAC,mBAAmB,CAAC;MAClC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBV,GAAG,CAAC;QAAEI,SAAS,EAAE;MAAM,CAAC,CAAC;MACzBN,KAAK,CAACY,KAAK,CAACA,KAAK,CAACC,OAAO,IAAI,cAAc,CAAC;MAC5C,OAAO,KAAK;IACd;EACF,CAAC;EAEDC,QAAQ,EAAE,MAAOC,QAAsB,IAAK;IAC1Cb,GAAG,CAAC;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;IACxB,IAAI;MACF,MAAMF,IAAI,GAAG,MAAML,WAAW,CAACe,QAAQ,CAACC,QAAQ,CAAC;MACjDb,GAAG,CAAC;QAAEI,SAAS,EAAE;MAAM,CAAC,CAAC;MACzBN,KAAK,CAACW,OAAO,CAAC,wCAAwC,CAAC;MACvD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBV,GAAG,CAAC;QAAEI,SAAS,EAAE;MAAM,CAAC,CAAC;MACzBN,KAAK,CAACY,KAAK,CAACA,KAAK,CAACC,OAAO,IAAI,qBAAqB,CAAC;MACnD,OAAO,KAAK;IACd;EACF,CAAC;EAEDG,MAAM,EAAEA,CAAA,KAAM;IACZd,GAAG,CAAC;MAAEE,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAChCN,WAAW,CAACiB,MAAM,CAAC,CAAC;IACpBhB,KAAK,CAACW,OAAO,CAAC,yBAAyB,CAAC;EAC1C,CAAC;EAEDM,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMZ,KAAK,GAAGF,GAAG,CAAC,CAAC,CAACE,KAAK;IACzB,IAAIA,KAAK,EAAE;MACTH,GAAG,CAAC;QAAEI,SAAS,EAAE;MAAK,CAAC,CAAC;MACxB,IAAI;QACF,MAAMF,IAAI,GAAG,MAAML,WAAW,CAACmB,cAAc,CAAC,CAAC;QAC/ChB,GAAG,CAAC;UAAEE,IAAI;UAAEE,SAAS,EAAE;QAAM,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACd;QACAV,GAAG,CAAC;UAAEE,IAAI,EAAE,IAAI;UAAEC,KAAK,EAAE,IAAI;UAAEC,SAAS,EAAE;QAAM,CAAC,CAAC;MACpD;IACF;EACF;AACF,CAAC,CAAC,EACF;EACEa,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAGC,KAAK,KAAM;IAAEhB,KAAK,EAAEgB,KAAK,CAAChB;EAAM,CAAC;AAChD,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}