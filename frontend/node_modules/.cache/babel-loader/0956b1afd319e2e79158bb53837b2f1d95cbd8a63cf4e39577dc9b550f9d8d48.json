{"ast":null,"code":"import{apiService}from'./api';class AuthService{async login(email,password){const response=await apiService.login(email,password);// Store token for future requests\nif(response.access_token){localStorage.setItem('auth_token',response.access_token);}return{user:response.user,token:response.access_token,access_token:response.access_token,token_type:response.token_type};}async register(userData){return await apiService.register(userData);}async getCurrentUser(){return await apiService.getCurrentUser();}logout(){localStorage.removeItem('auth_token');}getToken(){return localStorage.getItem('auth_token');}isAuthenticated(){return!!this.getToken();}}export const authService=new AuthService();","map":{"version":3,"names":["apiService","AuthService","login","email","password","response","access_token","localStorage","setItem","user","token","token_type","register","userData","getCurrentUser","logout","removeItem","getToken","getItem","isAuthenticated","authService"],"sources":["/Users/billscolinos/Documents/companyOS/frontend/src/services/authService.ts"],"sourcesContent":["import { apiService } from './api';\r\nimport { User, LoginResponse, RegisterData } from '../types';\r\n\r\nclass AuthService {\r\n  async login(email: string, password: string): Promise<LoginResponse> {\r\n    const response = await apiService.login(email, password);\r\n    \r\n    // Store token for future requests\r\n    if (response.access_token) {\r\n      localStorage.setItem('auth_token', response.access_token);\r\n    }\r\n    \r\n    return {\r\n      user: response.user,\r\n      token: response.access_token,\r\n      access_token: response.access_token,\r\n      token_type: response.token_type\r\n    };\r\n  }\r\n\r\n  async register(userData: RegisterData): Promise<User> {\r\n    return await apiService.register(userData);\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    return await apiService.getCurrentUser();\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('auth_token');\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('auth_token');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,OAAO,CAGlC,KAAM,CAAAC,WAAY,CAChB,KAAM,CAAAC,KAAKA,CAACC,KAAa,CAAEC,QAAgB,CAA0B,CACnE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,UAAU,CAACE,KAAK,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAExD;AACA,GAAIC,QAAQ,CAACC,YAAY,CAAE,CACzBC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAEH,QAAQ,CAACC,YAAY,CAAC,CAC3D,CAEA,MAAO,CACLG,IAAI,CAAEJ,QAAQ,CAACI,IAAI,CACnBC,KAAK,CAAEL,QAAQ,CAACC,YAAY,CAC5BA,YAAY,CAAED,QAAQ,CAACC,YAAY,CACnCK,UAAU,CAAEN,QAAQ,CAACM,UACvB,CAAC,CACH,CAEA,KAAM,CAAAC,QAAQA,CAACC,QAAsB,CAAiB,CACpD,MAAO,MAAM,CAAAb,UAAU,CAACY,QAAQ,CAACC,QAAQ,CAAC,CAC5C,CAEA,KAAM,CAAAC,cAAcA,CAAA,CAAkB,CACpC,MAAO,MAAM,CAAAd,UAAU,CAACc,cAAc,CAAC,CAAC,CAC1C,CAEAC,MAAMA,CAAA,CAAS,CACbR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC,CACvC,CAEAC,QAAQA,CAAA,CAAkB,CACxB,MAAO,CAAAV,YAAY,CAACW,OAAO,CAAC,YAAY,CAAC,CAC3C,CAEAC,eAAeA,CAAA,CAAY,CACzB,MAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,CAAC,CAAC,CAC1B,CACF,CAEA,MAAO,MAAM,CAAAG,WAAW,CAAG,GAAI,CAAAnB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}